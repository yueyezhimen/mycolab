# YOLOv5 🚀 by Ultralytics, GPL-3.0 license

# Parameters
nc: 80  # number of classes 类别数
depth_multiple: 1.0  # model depth multiple 控制模型的长度
width_multiple: 1.0  # layer channel multiple 卷积核的维度实际的维度 = width_multiple*64/128 控制模型的宽度
anchors:
  - [10,13, 16,30, 33,23]  # P3/8  17   (P3/8-small)  #head17
  - [30,61, 62,45, 59,119]  # P4/16     (P4/16-medium)#head20 medium输出中目标
  - [116,90, 156,198, 373,326]  # P5/32  (P5/32-large)#head23 large输出大目标

# YOLOv5 v6.0 backbone common.py处理 yolov5l.png
backbone:
  #-1代表上一层的数据而来 number代表是这个层有多少个，，还与depth_multiple有关 module是什么模型 args参数
  # [from, number, module, args] 实际的number层数与depth_multiple有关 实际的 number = depth_multiple*标记的number
  [[-1, 1, Conv, [64, 6, 2, 2]],#backbone0  # 0-P1/2
   [-1, 1, Conv, [128, 3, 2]],  #backbone1  # 1-P2/4
   [-1, 3, C3, [128]],          #backbone2
   [-1, 1, Conv, [256, 3, 2]],  #backbone3   # 3-P3/8
   [-1, 6, C3, [256]],          #backbone4
   [-1, 1, Conv, [512, 3, 2]],  #backbone5   # 5-P4/16
   [-1, 9, C3, [512]],          #backbone6
   [-1, 1, Conv, [1024, 3, 2]], #backbone7   # 7-P5/32
   [-1, 3, C3, [1024]],         #backbone8
   [-1, 1, SPPF, [1024, 5]],    #backbone9    # 9
  ]

# YOLOv5 v6.0 head nn.Upsample上采样 Concat拼接
head:
  [[-1, 1, Conv, [512, 1, 1]],                    #head10
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],    #head11
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4  #head12 输入6：#backbone6
   [-1, 3, C3, [512, False]],  # 13               #head13
   [-1, 1, Conv, [256, 1, 1]],                    #head14
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],    #head15
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3  #head16 输入4：#backbone4
   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)  #head17 small输出小目标
   [-1, 1, Conv, [256, 3, 2]],                    #head18
   [[-1, 14], 1, Concat, [1]],  # cat head P4     #head19 输入14:head14
   [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)#head20 medium输出中目标
   [-1, 1, Conv, [512, 3, 2]],                    #head21
   [[-1, 10], 1, Concat, [1]],  # cat head P5     #head22 输入10:head10
   [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)#head23 large输出大目标
   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5) #head24 输入17：head17 20：head20 23：head23
  ]
